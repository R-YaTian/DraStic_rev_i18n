/*
   Copyright (C) 2011 Hyllian/Jararaca - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   ------------------by Try791023 to Drastic-------NDS模擬器吧-----------------
*/

<vertex>

attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
	
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

void main()
{
	vec2 ps = vec2(1.0 / u_texture_size.z, 1.0 / u_texture_size.w);
	float dx = ps.x;
	float dy = ps.y;
	gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
	v_texture_coordinate = a_texture_coordinate.xyxy;
	v_texture_coordinate_1.xy = vec2(0.0,-dy); // B
	v_texture_coordinate_1.zw = vec2(-dx,0.0); // D
}
</vertex>
<fragment>
	const vec3 dtt = vec3(65536.0, 255.0, 1.0);

	float reduce(vec3 color) {
		return dot(color, dtt);
	}
uniform sampler2D u_texture;
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

void main()
{
	vec2 fp = fract(v_texture_coordinate.xy * u_texture_size.zw);
	
	vec2 st = step(0.5,fp);
	
	vec2 g1 = v_texture_coordinate_1.xy*(st.x + st.y - 1.0) + v_texture_coordinate_1.zw*(st.x - st.y);
	vec2 g2 = v_texture_coordinate_1.xy*(st.y - st.x) + v_texture_coordinate_1.zw*(st.x + st.y - 1.0);
	vec3 A = texture2D(u_texture, v_texture_coordinate.xy + g1 + g2 ).xyz;	
	vec3 B = texture2D(u_texture, v_texture_coordinate.xy + g1      ).xyz;
	vec3 C = texture2D(u_texture, v_texture_coordinate.xy + g1 - g2 ).xyz;
	vec3 D = texture2D(u_texture, v_texture_coordinate.xy      + g2 ).xyz;
	vec3 E = texture2D(u_texture, v_texture_coordinate.xy           ).xyz;
	vec3 F = texture2D(u_texture, v_texture_coordinate.xy      - g2 ).xyz;
	vec3 G = texture2D(u_texture, v_texture_coordinate.xy - g1 + g2 ).xyz;
	vec3 H = texture2D(u_texture, v_texture_coordinate.xy - g1      ).xyz;
	vec3 I = texture2D(u_texture, v_texture_coordinate.xy - g1 - g2 ).xyz;
	
	vec3  C1 = texture2D(u_texture, v_texture_coordinate.xy +2.0*g1-g2   ).xyz;
	vec3  G0 = texture2D(u_texture, v_texture_coordinate.xy -g1+2.0*g2   ).xyz;
	vec3  C4 = texture2D(u_texture, v_texture_coordinate.xy +g1-2.0*g2   ).xyz;
	vec3  I4 = texture2D(u_texture, v_texture_coordinate.xy -g1-2.0*g2   ).xyz;
	vec3  G5 = texture2D(u_texture, v_texture_coordinate.xy -2.0*g1+g2   ).xyz;
	vec3  I5 = texture2D(u_texture, v_texture_coordinate.xy -2.0*g1-g2   ).xyz;
	float a = reduce(A);	
	float b = reduce(B);
	float c = reduce(C);
	float d = reduce(D);
	float e = reduce(E);
	float f = reduce(F);
	float g = reduce(G);
	float h = reduce(H);
	float i = reduce(I);

	float  c1 = reduce( C1);
	float  g0 = reduce( G0);
	float  c4 = reduce( C4);
	float  i4 = reduce( I4);
	float  g5 = reduce( G5);
	float  i5 = reduce( I5);
	
	vec3 res = E;
	float AO  = 2.0*st.y - 1.0;
	float BO  = 2.0*st.x - 1.0;
	float CO  = st.x + st.y - 0.5;
	float AX  = 0.5*st.x + 1.5*st.y - 1.0;
	float BX  = 1.5*st.x - 0.5*st.y - 0.5;
	float CX  =     st.x + 0.5*st.y - 0.5;
	float AY  = -0.5*st.x + 1.5*st.y - 0.5;
	float BY  =  1.5*st.x + 0.5*st.y - 1.0;
	float CY  =  0.5*st.x +     st.y - 0.5;
	
	bool fx_1, fx_2, fx_3, condition_1, condition_1a, condition_1b, condition_2, condition_3, condition_4;
	bool condition_7, condition_8, condition_7a, condition_8a;

	fx_1        = (AO*fp.y+BO*fp.x > CO);
	fx_2        = (AX*fp.y+BX*fp.x > CX);
	fx_3        = (AY*fp.y+BY*fp.x > CY);
	condition_1a= ( e==c  &&  e==d  &&  h==g );
	condition_1b= ( e==g  &&  e==b  &&  f==c );
	condition_1 = (  e!=h  && (( h==f  && ( ( e!=i  && ( e!=b  ||  e!=d  ||  f!=b  &&  f!=c  ||  h!=d  &&  h!=g ))
	   || ( e==g  && ( i==h  ||  e==d  ||  h!=d )) || ( e==c  && ( i==h  ||  e==b  ||  f!=b ))))) );

	condition_2 = ( e!=h  &&  e!=f  && ( f!=i  &&  e==c  && ( h==i  &&  f!=b  ||  e!=i  &&  f==c4)));
	condition_3 = ( e!=h  &&  e!=f  && ( h!=i  &&  e==g  && ( f==i  &&  h!=d  ||  e!=i  &&  h==g5)));
	condition_4 = ( e!=h  &&  g==e  &&  e==c  &&  e!=i  &&  e!=f  );
	condition_7 = (  e!=f  && (( f==b  && ( ( e!=c  && ( e!=d  ||  e!=h  ||  b!=d  &&  b!=a  ||  f!=h  &&  f!=i ))
	   || ( e==i  && ( c==f  ||  e==h  ||  f!=h ))))
	) ); 
	condition_8 = (  e!=d  && (( d==h  && ( ( e!=g  && ( e!=f  ||  e!=b  ||  h!=f  &&  h!=i  ||  d!=b  &&  d!=a )) 
	   || ( e==i  && ( g==d  ||  e==f  ||  h!=f )) ))
	) ); 
	condition_7a  = ( e==a  &&  e==h  &&  f==i );
	condition_8a  = ( e==a  &&  e==f  &&  h==i );


	if (    (condition_1 && (fx_1 || (condition_1a && fx_2 || condition_1b && fx_3) ) ) ||
		(condition_8 && condition_8a && (BY*fp.y+AY*(1.0-fp.x) > CY)) || (fx_1 && condition_3)  )
        {
		res = H;
        }
	else if (  (condition_7 && condition_7a && (BX*(1.0-fp.y)+AX*fp.x > CX)) || (fx_1 && condition_2)  )
	{
		res = F;
	}
	else if (fx_1 && condition_4)
	{
		res = (F+H)*0.5;
	}

	 gl_FragColor.rgb = res;
}
</fragment>