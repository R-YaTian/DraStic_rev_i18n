/*
   Copyright (C) 2011 Hyllian/Jararaca - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   ------------------by Try791023 to Drastic-------NDS模擬器吧-----------------
*/

<vertex>

attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
	
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

void main()
{
	vec2 ps = vec2(1.0 / u_texture_size.z, 1.0 / u_texture_size.w);
	float dx = ps.x;
	float dy = ps.y;
	gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
	v_texture_coordinate = a_texture_coordinate.xyxy;
	v_texture_coordinate_1.xy = vec2(0.0,-dy); // B
	v_texture_coordinate_1.zw = vec2(-dx,0.0); // D
}
</vertex>
<fragment>
	const vec3 dtt = vec3(65536.0, 255.0, 1.0);

	float reduce(vec3 color) {
		return dot(color, dtt);
	}
uniform sampler2D u_texture;
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

#define FILTRO(PE, PI, PH, PF, PG, PC, PD, PB, PA, G5, C4, G0, C1, I4, I5, N15, N14, N11, F, H) \
	if ( PE!=PH && ((PH==PF && ( (PE!=PI && (PE!=PB || PE!=PD || PB==C1 && PD==G0 || PF!=PB && PF!=PC || PH!=PD && PH!=PG)) \
	   || (PE==PG && (PI==PH || PE==PD || PH!=PD)) \
	   || (PE==PC && (PI==PH || PE==PB || PF!=PB)) ))\
	   || (PE!=PF && (PE==PC && (PF!=PI && (PH==PI && PF!=PB || PE!=PI && PF==C4) || PE!=PI && PE==PG)))) ) \
                 {\
	                N11 = (N11+F)*0.5;\
        	        N14 = (N14+H)*0.5;\
                	N15 = F;\
                 }\
	else if (PE!=PH && PE!=PF && (PH!=PI && PE==PG && (PF==PI && PH!=PD || PE!=PI && PH==G5)))\
	{\
                N11 = (N11+H)*0.5;\
                N14 = N11;\
                N15 = H;\
	}\
	
void main()
{
	vec2 fp = fract(v_texture_coordinate.xy * u_texture_size.zw);
	
	vec2 g1 = v_texture_coordinate_1.xy * (step(0.5,fp.x) + step(0.5, fp.y) - 1.0) + v_texture_coordinate_1.zw * (step(0.5,fp.x) - step(0.5, fp.y));
	vec2 g2 = v_texture_coordinate_1.xy * (step(0.5,fp.y) - step(0.5, fp.x)) + v_texture_coordinate_1.zw * (step(0.5,fp.x) + step(0.5, fp.y) - 1.0);
		
	vec3 A = texture2D(u_texture, v_texture_coordinate.xy + g1 + g2 ).xyz;
	vec3 B = texture2D(u_texture, v_texture_coordinate.xy + g1      ).xyz;
	vec3 C = texture2D(u_texture, v_texture_coordinate.xy + g1 - g2 ).xyz;
	vec3 D = texture2D(u_texture, v_texture_coordinate.xy      + g2 ).xyz;
	vec3 E = texture2D(u_texture, v_texture_coordinate.xy           ).xyz;
	vec3 F = texture2D(u_texture, v_texture_coordinate.xy      - g2 ).xyz;
	vec3 G = texture2D(u_texture, v_texture_coordinate.xy - g1 + g2 ).xyz;
	vec3 H = texture2D(u_texture, v_texture_coordinate.xy - g1      ).xyz;
	vec3 I = texture2D(u_texture, v_texture_coordinate.xy - g1 - g2 ).xyz;
	
	vec3 A1 = texture2D(u_texture, v_texture_coordinate.xy + 2.0 * g1 + g2 ).xyz;
	vec3 C1 = texture2D(u_texture, v_texture_coordinate.xy + 2.0 * g1 - g2 ).xyz;
	vec3 A0 = texture2D(u_texture, v_texture_coordinate.xy + g1 + 2.0 * g2 ).xyz;
	vec3 G0 = texture2D(u_texture, v_texture_coordinate.xy - g1 + 2.0 * g2 ).xyz;
	vec3 C4 = texture2D(u_texture, v_texture_coordinate.xy + g1 - 2.0 * g2 ).xyz;
	vec3 I4 = texture2D(u_texture, v_texture_coordinate.xy - g1 - 2.0 * g2 ).xyz;
	vec3 G5 = texture2D(u_texture, v_texture_coordinate.xy - 2.0 * g1 + g2 ).xyz;
	vec3 I5 = texture2D(u_texture, v_texture_coordinate.xy - 2.0 * g1 - g2 ).xyz;
		
	vec3 E11 = E;
	vec3 E14 = E;
	vec3 E15 = E;
		
	float a = reduce(A);	
	float b = reduce(B);
	float c = reduce(C);
	float d = reduce(D);
	float e = reduce(E);
	float f = reduce(F);
	float g = reduce(G);
	float h = reduce(H);
	float i = reduce(I);
		
	float  a1 = reduce( A1);
	float  c1 = reduce( C1);
	float  a0 = reduce( A0);
	float  g0 = reduce( G0);
	float  c4 = reduce( C4);
	float  i4 = reduce( I4);
	float  g5 = reduce( G5);
	float  i5 = reduce( I5);
		
	FILTRO(e, i, h, f, g, c, d, b, a, g5, c4, g0, c1, i4, i5, E15, E14, E11, F, H);
	gl_FragColor.rgb = (fp.x < 0.50) ? ((fp.x < 0.25) ? ((fp.y < 0.25) ? E15: (fp.y < 0.50) ? E11: (fp.y < 0.75) ? E14: E15) : ((fp.y < 0.25) ? E14: (fp.y < 0.50) ? E  : (fp.y < 0.75) ? E  : E11)) : ((fp.x < 0.75) ? ((fp.y < 0.25) ? E11: (fp.y < 0.50) ? E  : (fp.y < 0.75) ? E   : E14) : ((fp.y < 0.25) ? E15: (fp.y < 0.50) ? E14: (fp.y < 0.75) ? E11 : E15));
}
</fragment>