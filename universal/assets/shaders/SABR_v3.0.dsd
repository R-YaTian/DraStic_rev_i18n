/*
	SABR v3.0 Shader
	Joshua Street
	
	Portions of this algorithm were taken from Hyllian's 5xBR v3.7c
	shader.
	
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
   ------------------by Try791023 to Drastic-------NDS模擬器吧-------------------------------------------
*/

<vertex>
attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
uniform vec4 u_texture_size;
varying vec2 v_texture_coordinate;
varying vec4 v_texture_coordinate_1_2_3;
varying vec4 v_texture_coordinate_5_10_15;
varying vec4 v_texture_coordinate_16_17_18_7_8;
varying vec4 v_texture_coordinate_9_14_19;
varying vec4 v_texture_coordinate_11_12_13;
varying vec4 v_texture_coordinate_16_17_18;
varying vec4 v_texture_coordinate_5_10_151_22_23;

void main()
{
	gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
	v_texture_coordinate = a_texture_coordinate.xy;
	float x = 1.0 / u_texture_size.z;
	float y = 1.0 / u_texture_size.w;
	v_texture_coordinate_1_2_3           = a_texture_coordinate.xxxy + vec4(      -x, 0.0,   x, -2.0 * y);
	v_texture_coordinate_16_17_18_7_8    = a_texture_coordinate.xxxy + vec4(      -x, 0.0,   x,       -y);
	v_texture_coordinate_11_12_13        = a_texture_coordinate.xxxy + vec4(      -x, 0.0,   x,      0.0);
	v_texture_coordinate_16_17_18        = a_texture_coordinate.xxxy + vec4(      -x, 0.0,   x,        y);
	v_texture_coordinate_5_10_151_22_23  = a_texture_coordinate.xxxy + vec4(      -x, 0.0,   x,  2.0 * y);
	v_texture_coordinate_5_10_15         = a_texture_coordinate.xyyy + vec4(-2.0 * x,  -y, 0.0,        y);
	v_texture_coordinate_9_14_19         = a_texture_coordinate.xyyy + vec4( 2.0 * x,  -y, 0.0,        y);
}

</vertex>
<fragment>

const vec4 Ai  = vec4( 1.0, -1.0, -1.0,  1.0);
const vec4 B45 = vec4( 1.0,  1.0, -1.0, -1.0);
const vec4 C45 = vec4( 1.5,  0.5, -0.5,  0.5);
const vec4 B30 = vec4( 0.5,  2.0, -0.5, -2.0);
const vec4 C30 = vec4( 1.0,  1.0, -0.5,  0.0);
const vec4 B60 = vec4( 2.0,  0.5, -2.0, -0.5);
const vec4 C60 = vec4( 2.0,  0.0, -1.0,  0.5);

const vec4 M45 = vec4(0.4, 0.4, 0.4, 0.4);
const vec4 M30 = vec4(0.2, 0.4, 0.2, 0.4);
const vec4 M60 = M30.yxwz;
const vec4 Mshift = vec4(0.2, 0.2, 0.2, 0.2);

const float coef = 2.0;

const vec4 threshold = vec4(0.32, 0.32, 0.32, 0.32);

const vec3 lum = vec3(0.21, 0.72, 0.07);

vec4 _not_(vec4 A)
{
	return vec4(1.0) - A;
}
vec4 _and_(vec4 A, vec4 B)
{
	return A * B;
}
vec4 _or_(vec4 A, vec4 B)
{
	return max(A, B);
}
vec4 _ne_(vec4 A, vec4 B)
{
	return abs(sign(A - B));
}
vec4 _lte_(vec4 A, vec4 B)
{
	return step(A, B);
}
vec4 _gte_(vec4 A, vec4 B)
{
	return _lte_(B, A);
}
vec4 _lt_(vec4 A, vec4 B)
{
	return _not_(_gte_(A, B));
}

vec4 lum_to(vec3 v0, vec3 v1, vec3 v2, vec3 v3) {
	return vec4(dot(lum, v0), dot(lum, v1), dot(lum, v2), dot(lum, v3));
}

vec4 lum_df(vec4 A, vec4 B) {
	return abs(A - B);
}

vec4 lum_eq(vec4 A, vec4 B) {
	return _lt_(lum_df(A, B), threshold);
}

vec4 lum_wd(vec4 a, vec4 b, vec4 c, vec4 d, vec4 e, vec4 f, vec4 g, vec4 h) {
	return lum_df(a, b) + lum_df(a, c) + lum_df(d, e) + lum_df(d, f) + 4.0 * lum_df(g, h);
}

float c_df(vec3 c1, vec3 c2) {
	vec3 df = abs(c1 - c2);
	return df.r + df.g + df.b;
}

uniform sampler2D u_texture; 
varying vec2 v_texture_coordinate;
varying vec4 v_texture_coordinate_1_2_3;
varying vec4 v_texture_coordinate_5_10_15;
varying vec4 v_texture_coordinate_16_17_18_7_8;
varying vec4 v_texture_coordinate_9_14_19;
varying vec4 v_texture_coordinate_11_12_13;
varying vec4 v_texture_coordinate_16_17_18;
varying vec4 v_texture_coordinate_5_10_151_22_23;
uniform vec4 u_texture_size;

void main()
{

//	           掩模算法
//	+-----+-----+-----+-----+-----+
//	|     |  1  |  2  |  3  |     |
//	+-----+-----+-----+-----+-----+
//	|  5  |  6  |  7  |  8  |  9  |
//	+-----+-----+-----+-----+-----+
//	| 10  | 11  | 12  | 13  | 14  |
//	+-----+-----+-----+-----+-----+
//	| 15  | 16  | 17  | 18  | 19  |
//	+-----+-----+-----+-----+-----+
//	|     | 21  | 22  | 23  |     |
//	+-----+-----+-----+-----+-----+
//              掩模值

	vec3 P1  = texture2D(u_texture, v_texture_coordinate_1_2_3.xw).rgb;
	vec3 P2  = texture2D(u_texture, v_texture_coordinate_1_2_3.yw).rgb;
	vec3 P3  = texture2D(u_texture, v_texture_coordinate_1_2_3.zw).rgb;
	
	vec3 P6  = texture2D(u_texture, v_texture_coordinate_16_17_18_7_8.xw).rgb;
	vec3 P7  = texture2D(u_texture, v_texture_coordinate_16_17_18_7_8.yw).rgb;
	vec3 P8  = texture2D(u_texture, v_texture_coordinate_16_17_18_7_8.zw).rgb;
	
	vec3 P11 = texture2D(u_texture, v_texture_coordinate_11_12_13.xw).rgb;
	vec3 P12 = texture2D(u_texture, v_texture_coordinate_11_12_13.yw).rgb;
	vec3 P13 = texture2D(u_texture, v_texture_coordinate_11_12_13.zw).rgb;
	
	vec3 P16 = texture2D(u_texture, v_texture_coordinate_16_17_18.xw).rgb;
	vec3 P17 = texture2D(u_texture, v_texture_coordinate_16_17_18.yw).rgb;
	vec3 P18 = texture2D(u_texture, v_texture_coordinate_16_17_18.zw).rgb;
	
	vec3 P21 = texture2D(u_texture, v_texture_coordinate_5_10_151_22_23.xw).rgb;
	vec3 P22 = texture2D(u_texture, v_texture_coordinate_5_10_151_22_23.yw).rgb;
	vec3 P23 = texture2D(u_texture, v_texture_coordinate_5_10_151_22_23.zw).rgb;
	
	vec3 P5  = texture2D(u_texture, v_texture_coordinate_5_10_15.xy ).rgb;
	vec3 P10 = texture2D(u_texture, v_texture_coordinate_5_10_15.xz ).rgb;
	vec3 P15 = texture2D(u_texture, v_texture_coordinate_5_10_15.xw ).rgb;
	
	vec3 P9  = texture2D(u_texture, v_texture_coordinate_9_14_19.xy  ).rgb;
	vec3 P14 = texture2D(u_texture, v_texture_coordinate_9_14_19.xz  ).rgb;
	vec3 P19 = texture2D(u_texture, v_texture_coordinate_9_14_19.xw  ).rgb;

	// 存儲每個點的亮度值
	vec4 p7  = lum_to(P7,  P11, P17, P13);
	vec4 p8  = lum_to(P8,  P6,  P16, P18);
	vec4 p11 = p7.yzwx;                      // P11, P17, P13, P7
	vec4 p12 = lum_to(P12, P12, P12, P12);
	vec4 p13 = p7.wxyz;                      // P13, P7,  P11, P17
	vec4 p14 = lum_to(P14, P2,  P10, P22);
	vec4 p16 = p8.zwxy;                      // P16, P18, P8,  P6
	vec4 p17 = p7.zwxy;                      // P11, P17, P13, P7
	vec4 p18 = p8.wxyz;                      // P18, P8,  P6,  P16
	vec4 p19 = lum_to(P19, P3,  P5,  P21);
	vec4 p22 = p14.wxyz;                     // P22, P14, P2,  P10
	vec4 p23 = lum_to(P23, P9,  P1,  P15);
	
	vec2 fp = fract(v_texture_coordinate.xy * u_texture_size.zw);
	
	vec4 ma45 = smoothstep(C45 - M45, C45 + M45, Ai * fp.y + B45 * fp.x);
	vec4 ma30 = smoothstep(C30 - M30, C30 + M30, Ai * fp.y + B30 * fp.x);
	vec4 ma60 = smoothstep(C60 - M60, C60 + M60, Ai * fp.y + B60 * fp.x);
	vec4 marn = smoothstep(C45 - M45 + Mshift, C45 + M45 + Mshift, Ai * fp.y + B45 * fp.x);
	
	vec4 e45   = lum_wd(p12, p8, p16, p18, p22, p14, p17, p13);
	vec4 econt = lum_wd(p17, p11, p23, p13, p7, p19, p12, p18);
	vec4 e30   = lum_df(p13, p16);
	vec4 e60   = lum_df(p8, p17);
	
	vec4 r45 = _and_(
	    _and_(_ne_(p12, p13), _ne_(p12, p17)),
	    _or_(
			_or_(
			    _and_(_not_(lum_eq(p13, p7)), _not_(lum_eq(p13, p8))),
				_and_(_not_(lum_eq(p17, p11)), _not_(lum_eq(p17, p16)))),
			_or_(
				_and_(
				    lum_eq(p12, p18),
				    _or_(
				        _and_(_not_(lum_eq(p13, p14)), _not_(lum_eq(p13, p19))),
					    _and_(_not_(lum_eq(p17, p22)), _not_(lum_eq(p17, p23))))),
			    _or_(lum_eq(p12, p16), lum_eq(p12, p8)))));
	vec4 r30 = _and_(_ne_(p12, p16), _ne_(p11, p16));
	vec4 r60 = _and_(_ne_(p12, p8), _ne_(p7, p8));
	
	// 結合邊緣規則
	vec4 edr45 = _and_(_lt_(e45, econt), r45);
	vec4 edrrn = _lte_(e45, econt);
	vec4 edr30 = _and_(_lte_(e30, coef * e60), r30);
	vec4 edr60 = _and_(_lte_(e60, coef * e30), r60);
	// 完成插補規則
	vec4 final45 = _and_(_and_(_not_(edr30), _not_(edr60)), edr45);
	vec4 final30 = _and_(_and_(edr45, edr30), _not_(edr60));
	vec4 final60 = _and_(_and_(edr45, edr60), _not_(edr30));
	vec4 final36 = _and_(_and_(edr45, edr30), edr60);
	vec4 finalrn = _and_(_not_(edr45), edrrn);
	// 確定與混合每個角落的顏色
	vec4 px = step(lum_df(p12, p17), lum_df(p12, p13));
	// 通過合併最終規則的結果，相應確定混合量
	// 混合量在每個角落的規則
	vec4 mac = final36 * max(ma30, ma60) + final30 * ma30 + final60 * ma60 + final45 * ma45 + finalrn * marn;
	
	vec3 res1 = P12;
	res1 = mix(res1, mix(P13, P17, px.x), mac.x);
	res1 = mix(res1, mix(P7 , P13, px.y), mac.y);
	res1 = mix(res1, mix(P11, P7 , px.z), mac.z);
	res1 = mix(res1, mix(P17, P11, px.w), mac.w);
	
	vec3 res2 = P12;
	res2 = mix(res2, mix(P17, P11, px.w), mac.w);
	res2 = mix(res2, mix(P11, P7 , px.z), mac.z);
	res2 = mix(res2, mix(P7 , P13, px.y), mac.y);
	res2 = mix(res2, mix(P13, P17, px.x), mac.x);
	
	gl_FragColor.rgb = mix(res1, res2, step(c_df(P12, res1), c_df(P12, res2)));
	gl_FragColor.a = 1.0;
}
</fragment>