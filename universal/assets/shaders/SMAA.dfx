// SMAA shader
=============================================
<options>
name=SMAA
textures=5
</options>

<vheader>
#if __VERSION__ >= 130
#version 130
#endif
#define SMAA_INCLUDE_PS 0
</vheader>

<fheader>
#if __VERSION__ >= 130
#version 130
#endif
#if GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define LUMA_EDGE_DETECTION
#endif

#define SMAA_INCLUDE_VS 0
</fheader>

<header>
//#define SMAA_DISABLE_DIAG_DETECTION
//#define SMAA_PRESET_HIGH
#define SMAA_PRESET_ULTRA
//#define SMAA_RT_METRICS vec4(1.0 / 512.0, 1.0 / 384.0, 512.0, 384.0)
uniform mediump vec4 u_texture_size;
#define SMAA_RT_METRICS u_texture_size

#if GL_ES && (__VERSION__ < 130)
#define SMAA_CUSTOM_SL
#define SMAATexture2D(tex) sampler2D tex
#define SMAATexturePass2D(tex) tex
#define SMAASampleLevelZero(tex, coord) texture2D(tex, coord)
#define SMAASampleLevelZeroPoint(tex, coord) texture2D(tex, coord)
#define SMAASampleLevelZeroOffset(tex, coord, offset) texture2D(tex, coord + (offset * SMAA_RT_METRICS.xy))
#define SMAASample(tex, coord) texture2D(tex, coord)
#define SMAASamplePoint(tex, coord) texture2D(tex, coord)
#define SMAASampleOffset(tex, coord, offset) texture2D(tex, coord + offset)
#define SMAA_FLATTEN
#define SMAA_BRANCH
#define lerp(a, b, t) mix(a, b, t)
#define saturate(a) clamp(a, 0.0, 1.0)
#define mad(a, b, c) (a * b + c)
#define float2 vec2
#define float3 vec3
#define float4 vec4
#define int2 vec2
#define int3 vec3
#define int4 vec4
#define bool2 bvec2
#define bool3 bvec3
#define bool4 bvec4

#define round(x)  floor(x + (0.5))

#ifdef GL_FRAGMENT_PRECISION_HIGH
#define SMAA_BLENDING_TEST_FACTOR   (1e-5)
#else
#define SMAA_BLENDING_TEST_FACTOR   (1e-3)
#endif

#else

#define SMAA_GLSL_3
#define SMAA_BLENDING_TEST_FACTOR   (1e-5)

#endif
</header>

<include>
file=smaa/SMAA.hlsl
</include>

<texture:0>
input=framebuffer
min_filter=GL_LINEAR
mag_filter=GL_LINEAR
</texture>

<texture:1>
input=null
format=GL_RGBA
internalformat=GL_RGBA
type=GL_UNSIGNED_BYTE
min_filter=GL_LINEAR
mag_filter=GL_LINEAR
</texture>

<texture:2>
input=null
format=GL_RGBA
internalformat=GL_RGBA
type=GL_UNSIGNED_BYTE
min_filter=GL_LINEAR
mag_filter=GL_LINEAR
</texture>

<texture:3>
input=smaa/AreaTexRGB.raw
width=160
height=560
format=GL_RGB
internalformat=GL_RGB
type=GL_UNSIGNED_BYTE
min_filter=GL_LINEAR
mag_filter=GL_LINEAR
</texture>

<texture:4>
input=smaa/SearchTexRGB.raw
width=64
height=16
format=GL_RGB
internalformat=GL_RGB
type=GL_UNSIGNED_BYTE
min_filter=GL_LINEAR
mag_filter=GL_LINEAR
</texture>

// Edge Detection pass
<pass>
shader=smaa/smaa_edge.dsd
sampler:u_texture=0
output=1:1
</pass>

// Blending Weight Calculation pass
<pass>
shader=smaa/smaa_weight.dsd
sampler:u_texture_edges=1
sampler:u_texture_area=3
sampler:u_texture_search=4
output=2:1
</pass>

// Neighborhood Blending pass
<pass>
shader=smaa/smaa_blend.dsd
sampler:u_texture=0
sampler:u_texture_blend=2
output=1:1
</pass>

<pass>
s_hader=linear.dsd
shader=quilez.dsd
sampler:u_texture=1
</pass>
