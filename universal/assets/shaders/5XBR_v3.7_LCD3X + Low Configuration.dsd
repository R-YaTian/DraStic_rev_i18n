/*
  Copyright (C) 2011 Hyllian/Jararaca - sergiogdb@gmail.com
  This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//    xBR LVL1 works over the pixels below:
//
//        |B |C |
//    |D |E |F |F4|
//     |G |H |I |I4|
//        |H5|I5|
//
//   Consider E as the central pixel. xBR LVL1 needs only to look at 12 texture pixels.
   ------------------by Try791023 to Drastic----------------------------------
*/

<vertex>

attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
	
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

void main() {
      vec2 ps = vec2(1.0 / u_texture_size.z, 1.0 / u_texture_size.w);
      float dx = ps.x;
      float dy = ps.y;
      gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
      v_texture_coordinate = a_texture_coordinate.xyxy;
      v_texture_coordinate_1.xy = vec2(0.0,-dy); // B
      v_texture_coordinate_1.zw = vec2(-dx,0.0); // D
    }
</vertex>
<fragment>

uniform sampler2D u_texture;
uniform vec4 u_texture_size;
varying vec4 v_texture_coordinate;
varying vec4 v_texture_coordinate_1;

const float coef = 2.0;
const vec3 dtt = vec3(65536.0, 255.0, 1.0);
const float y_weight = 48.0;
const float u_weight = 7.0;
const float v_weight = 6.0;
const mat3 yuv = mat3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);
const mat3 yuv_weighted = mat3(y_weight * yuv[0], u_weight * yuv[1], v_weight * yuv[2]);

float RGBtoYUV(vec3 color)
{
  return dot(color, yuv_weighted[0]);
}

float df(float A, float B)
{
  return abs(A-B);
}

bool eq(float A, float B)
{
  return (df(A, B) < 15.0);
}



float weighted_distance(float a, float b, float c, float d, float e, float f, float g, float h)
{
  return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));
}

    void main() {
      bool edr, px; // px = pixel, edr = edge detection rule
      bool interp_restriction_lv1;
      bool nc; // new_color
      bool fx; // inequations of straight lines.

      vec2 pos  = fract(v_texture_coordinate.xy * u_texture_size.zw)-vec2(0.5, 0.5); // pos = pixel position
      vec2 dir = sign(pos); // dir = pixel direction
      vec2 g1 = dir*v_texture_coordinate_1.xy;
      vec2 g2 = dir*v_texture_coordinate_1.zw;
      vec3 B = texture2D(u_texture, v_texture_coordinate.xy +g1   ).xyz;
      vec3 C = texture2D(u_texture, v_texture_coordinate.xy +g1-g2).xyz;
      vec3 D = texture2D(u_texture, v_texture_coordinate.xy    +g2).xyz;
      vec3 E = texture2D(u_texture, v_texture_coordinate.xy       ).xyz;
      vec3 F = texture2D(u_texture, v_texture_coordinate.xy    -g2).xyz;
      vec3 G = texture2D(u_texture, v_texture_coordinate.xy -g1+g2).xyz;
      vec3 H = texture2D(u_texture, v_texture_coordinate.xy -g1   ).xyz;
      vec3 I = texture2D(u_texture, v_texture_coordinate.xy -g1-g2).xyz;

      vec3 F4 = texture2D(u_texture, v_texture_coordinate.xy    -2.0*g2).xyz;
      vec3 I4 = texture2D(u_texture, v_texture_coordinate.xy -g1-2.0*g2).xyz;
      vec3 H5 = texture2D(u_texture, v_texture_coordinate.xy -2.0*g1   ).xyz;
      vec3 I5 = texture2D(u_texture, v_texture_coordinate.xy -2.0*g1-g2).xyz;

      float b = RGBtoYUV( B );
      float c = RGBtoYUV( C );
      float d = RGBtoYUV( D );
      float e = RGBtoYUV( E );
      float f = RGBtoYUV( F );
      float g = RGBtoYUV( G );
      float h = RGBtoYUV( H );
      float i = RGBtoYUV( I );

      float i4 = RGBtoYUV( I4 );
      float i5 = RGBtoYUV( I5 );
      float h5 = RGBtoYUV( H5 );
      float f4 = RGBtoYUV( F4 );

       fx = ( dot(dir,pos) > 0.5 );

      interp_restriction_lv1 = ((e!=f) && (e!=h) && ( !eq(f,b) && !eq(f,c) || !eq(h,d) && !eq(h,g) || eq(e,i) && (!eq(f,f4) && !eq(f,i4) || !eq(h,h5) && !eq(h,i5)) || eq(e,g) || eq(e,c)) );

      edr = (weighted_distance( e, c, g, i, h5, f4, h, f) < weighted_distance( h, d, i5, f, i4, b, e, i)) && interp_restriction_lv1;

      nc = ( edr && fx );

      px = (df(e,f) <= df(e,h));

	  gl_FragColor.xyz = nc ? px ? F : H : E;
    }
</fragment>