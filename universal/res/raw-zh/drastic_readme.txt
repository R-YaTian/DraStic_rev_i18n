
<t1>1. 设置

点触主菜单中的'配置选项' ，或游戏菜单中的 '选项' 进入设置

注意：
并非所有选项在所有设备（例如 Android TV）上都可用。

选项如下:

<t2>1.1 视频

<b>跳帧类型
设成"手动"或"自动"来进行跳帧。当某一帧被跳过时，不会有任何2D或3D图形被渲染(虽然多边形引擎仍然通过模拟在运作)，这样可以带来提速。
关于跳帧的数值"N": 如果您设成手动，那么每(N + 1)帧里就会有N帧被跳过。例如，如果您把跳帧数设成2，那么只有1/3的帧数会被渲染。
如果跳帧类型是自动，那么模拟器就会只在模拟速度低于正常值时跳帧，但是跳帧数最大不超过N。
请注意跳帧过多会明显地使游戏幻灯片甚至打乱游戏，所以您的游戏在运行中卡成幻灯片的话，请尝试关闭跳帧。

<b>跳帧值
用于上述自动或手动跳帧模式的跳帧值，范围是0到9

<b>安全跳帧
启用以使用安全跳帧策略。

<b>快进最大速度
这是当您通过游戏菜单或者外接控制器按下快进键时，游戏运行的最大速度
注意：实际快进速度还要取决于您的设备的配置，如果您选择了300%，但是设备只能加速到200%时，加速最大只会加到200%

<b>显示加速图标
启用/禁用当快进启用时的 '>>' 图标

<b>滤镜
选择滤镜，滤镜通过 GPU 着色器实现，所以理论上对游戏运行速度的影响很小

<b>高分辨率 3D 渲染
3D 图形将以正常分辨率的两倍进行渲染。
这可以提升画质并带来更流畅的动画效果，但需要较高性能的硬件（最好是四核 CPU）才能以较好的速度运行。

<b>16位渲染
启用16位材质形式。画面质量会下降，但是在某些设备上会提速

<b>禁用边缘标记
禁用边缘标记的功能

<b>强制上屏为主屏
NDS有两个显示引擎，一个显示2D+3D内容，另一个仅显示2D内容。通常情况下，游戏可
让引擎在上下屏间切换。勾选此选项会忽视这种切换，强制上屏显示主引擎（2D+3D）
下屏显示副引擎（仅2D）。这在某些游戏中会有用，比如索尼克（冲刺、编年史）

<b>多线程3D渲染
如果您有多核设备的话。DraStic就可以把屏幕进程交给另一个线程，从而达到提速的目的。
如果您勾选了多线程渲染，您就能得到更多提速，但这个选项会造成图像错误和不稳定。
出现某些图形问题时，请您先尝试关掉这个选项。

<b>视频输出模式 (安卓4.2.2及以上)
设置HDMI视频输出. 标准是“完全同步”，该模式下，视频输出设备会显示
与手机或者平板电脑上完全一样的画面。
“按比例模式”和“全屏模式”仅显示下方选项中选中的屏幕。

<b>输出屏幕 (安卓4.2.2及以上)
选择视频输出设备显示的屏幕

<b>视频输出边框 (安卓4.2.2及以上)
修改视频输出时的边框

<t2>1.2 音频

<b>开启声音
声音的开启或关闭是全局性的，对每个游戏都有效

<b>声音延时
调节音频模拟的延时
声音延时为“低”时效果最好。但如果您的游戏运行速度下降，请尝试设置成“中”或“高”。

<b>音量
调整游戏音频的音量

<b>启用设备的麦克风
关闭/开启设备上的麦克风，关闭它可以省电

<b>麦克风灵敏度
设置设备麦克风灵敏度。

<t2>1.3 虚拟按键设定 (TV 模式中不可用)

<b>总是显示Start键和Select键
当您在运行游戏时，屏幕底部会有一个菜单键，点击它就会显示一些功能按键。
Start键和Select就在其中，但若勾选此项，Start键和Select键将始终可见。

<b>菜单键位置
设置菜单键的位置
注意：如果您设置成“隐藏”，而且也没有把它映射到实体按键上的话，您就无法打开快捷菜单了。

<b>虚拟快捷键I,II,III
可以设置成以下功能：加速、快速存档/读档，上下屏切换，屏幕布局切换，显示/隐藏虚拟按键，虚拟麦克风以及连发。
点击连发即可切换连发模式，此时按住某个按键即可连发。连发只能用于 A,B,X,Y,L,R 键。

<b>皮肤
虚拟按键皮肤。“默认”即是模拟器自带皮肤，应用数据目录的virtual_controller文件夹下的“Simple”是DIY皮肤的样本，可用于参考。
自定义的<皮肤包文件名>.zip文件中必须含有文件名与样本一致的PNG图片，才会显示在此选项中。

<b>按键操作同时触发DS触屏操作
若开启此项，触摸虚拟按键区域也会被视为触摸位于按键下方位置的DS触摸屏

<b>按键震动
若开启此项，每次按虚拟按键时都会有震动反馈

<b>禁用十字键斜向输入
若开启此项，虚拟按键十字键只可用上下左右四个方向
在某些无需斜向操作的游戏中，这很有用

<b>十字键触摸有效区调节 (1.0-2.0)
设置十字键额外的触摸有效区

<b>动作键触摸有效区调节 (1.0-2.0)
设置A/B/X/Y键额外的触摸有效区

<b>虚拟按键不透明度
设置虚拟按键不透明度
设成"0%"虚拟按键完全透明，设成"100%"完全不透明

<t2>1.4 外接控制器

<b>选择按键映射方案
您最多可以为您的外接手柄（如蓝牙手柄）或设备上的实体按键 (Nvidia Shield, Xperia Play) 设置3组不同的按键映射方案
在这里选择您想要更改的映射方案，然后点击下面的按钮进行编辑

<b>控制键映射/特殊键映射
按这个按钮来打开按键映射对话框，然后您就能映射控制器上的十字键和其他按键了
您还可以映射一个屏幕切换快捷键，当您使用单屏布局时，这个功能会十分给力

<b>重命名
在某些设备上，手柄的名称并不会自动识别。如果映射方案列表中显示为未知的名称，或者想要给一只手柄保存两种映射方案，您可以在按下此按键后修改显示的名称

<b>禁用已映射的虚拟按键
若开启此项,所有被映射到实体按键的虚拟按键，都不会再显示

<b>加速键切换模式
在切换模式中，任何已映射的加速键都可以开关加速。如果禁用此选项，就会变成仅在按下加速键时加速

<b>启用控制器扳机键
使用外接手柄上的LR扳机键

<b>控制器右摇杆模式
用您外接手柄上的右摇杆（或者触控板）来进行某些游戏的触屏操作
对于FPS游戏来说，这很有用。可以依次尝试三种不同模式（FPS模式、摇杆模式或是触笔模式），看看哪种更适合您的游戏
如果设为“触笔模式”，则摇杆将直接移动触笔指针，该指针可通过指定按钮按下

<b>振动设备
决定振动功能使用设备内置马达还是控制器的振动马达。
若设备未内置振动马达，即使选取“内置”选项也不会有振动效果反馈。

<b>右摇杆死区
设置触摸模式下右摇杆的死区范围

<t2>1.5 常规

<b>显示FPS
游戏运行速度指示器

<b>透明FPS显示器

<b>横屏模式旋转
自动: 启用横屏布局与竖屏布局之间的自动旋转。
如果当前布局是竖屏模式，设备就不会自动旋转，因为有些游戏需要那样玩
横屏: 所有横屏布局固定为横屏显示
反向横屏: 所有横屏布局固定为反向横屏显示

<b>自动保存
当您退出DraStic时，自动保存您的进度
这项功能不会占用常规即时存档位，只有再次启动DraStic并点击主菜单的“继续”时才会自动读取这个存档

<b>从快捷方式打开时读取最近的即时存档
从快捷方式打开游戏时，自动读取最近的即时存档
<i>注意：在游戏浏览器中长按游戏即可创建快捷方式

<b>覆盖即时存档需要确认
开启此选项，每次覆盖即时存档时都会有提示
以防止您操作失误，意外覆盖存档

<b>读取即时存档需要确认
每次读取即时存档时都会有提示

<b>启用金手指
开启全局金手指功能
如果您开启的金手指有问题，导致无法进入游戏时，请您关闭这个选项
这种情况下，暂时关闭金手指功能，并在进入游戏后禁用导致问题的金手指代码
然后您就可以再次开启金手指功能

<b>启用Lua
该选项可全局启用 Lua 脚本处理。
有关 Lua 脚本的更多信息，请参见第 8 章 Lua 接口。

<b>禁用返回键
禁用您设备上的返回键响应。推荐您开启这个选项，以防操作失误
若关闭此选项，则返回键可用于呼出模拟器菜单

<b>禁用菜单键
禁用您设备上的“菜单键”响应。

<b>默认布局
设置全局默认布局，当运行新游戏时，则不再需要重新设置。

<b>连发速度
设置连发的速度/频率

<b>数据存储目录
决定DraStic数据存储目录的位置。数据存储目录用于存放即时存档、电池存档、金手指数据库等数据。
您可以在此自定义选择指定的存储路径，重启模拟器后完成数据迁移。
安卓10及以上版本默认使用应用内置数据存储作为数据存储目录，不支持直接使用内部存储的DraStic文件夹。
安卓5-9默认使用内部存储的DraStic文件夹，但前提是已授予存储权限。不支持使用应用内置数据存储。
安卓4.4.x无法修改数据存储目录，默认且只能使用内部存储的DraStic文件夹。
安卓4.0-4.3默认使用内部存储的DraStic文件夹，不支持使用应用内置数据存储，但允许自定义存储路径。

<t2>1.6 系统设置

在此您可以像真正的NDS固件中一样修改您的个人资料
这些数据比如您的昵称，将被用在某些游戏中

<b>Slot2 卡带类型
配置 Slot2 卡槽模拟插入的卡带类型

<b>强制系统时间作为实时时钟
强制使用安卓系统时间作为游戏的实时时钟 (RTC)

<b>自定义系统日期和时间
我们改变了实时时钟的工作方式，现在仅在模拟的 DS 启动时才使用安卓系统时间，之后时间将与模拟时间同步。
当您在游戏中“快进”时，时间会显得流动得更快；当您“减速”时，时间会变慢。
加载即时存档时，时间会从保存时的状态继续，而不是当前的真实时间。
若要与现实时间重新同步，请重置游戏并加载游戏内存档。
通过此设置，您可以指定实时时钟的起始时间，而不是使用系统时间。

<t2>1.7 高级

<b>使用原始 .sav 存档格式 (无尾部信息)
开启该选项将会使得模拟器核心在处理游戏内电池存档时不再附加尾部信息。
这样电池存档的文件大小将会和卡带的存储芯片容量一致，
方便您将模拟器保存的电池存档移动到其他位置使用。(例如 melonDS 模拟器，实体机烧录卡等)

<b>在即时存档中保存电池存档
在即时存档文件中保存游戏内存档。这是为了确保游戏内存档和即时存档同步
若二者不同步，在某些游戏中（尤其是宝可梦）可能会造成掉档

<b>启用解压功能
启用此项，压缩的游戏会自动解压并缓存在您的内部存储中。这样会延长加载时间，但可以节省内存。

<b>启用预加载未压缩的游戏到内存
若启用此项，则未压缩的 .nds 游戏文件将会被预载到内存中。
这会增加内存占用，但在一定程度上可提升游戏性能。

<b>忽略游戏卡带限制
如果某些改版游戏ROM（如汉化版游戏）读取出错，请开启此项。

<b>自动裁剪 ROM
仅使用 ROM 文件头信息中指定长度的数据。
这可以让一些原本在设备上存在问题的大型游戏顺利运行。

<b>使用低分辨率UI
这个选项会在低端设备上自动勾选。在低端设备上使用高占用的UI资源会导致不稳定。

<b>在渲染线程中休眠
在某些设备上（尤其是运行安卓5及以上系统的 Adreno GPU），开启此选项可能会带来更好的性能。
您可以分别开启或关闭此选项进行测试，看哪种方式能让 DraStic 运行得更流畅。

<b>布局编辑器自动校准
启用后，在屏幕布局编辑器中，屏幕会自动根据另一块屏幕的位置和大小进行调整。
而在虚拟按键编辑器中，控件元素会自动吸附到网格上。

<b>帧率稳定器(额外 CPU 负载)
当该值非零时，DraStic 会额外增加 CPU 负载，以尝试强制让设备保持在高性能状态。
这可能会在某些性能本应该足以全速运行游戏且无需跳帧的设备上，加快游戏运行速度，但会以耗电量增加为代价。
在受影响的设备上，可以尝试逐步增加该值，直到目标游戏能够以全速运行。

<b>调试信息
仅显示一些内部调试信息，一般情况下您无需关心此处。


<t1>2. 快捷菜单

在游戏中，您可以通过点触屏幕底部的菜单键打开此菜单，或者按下映射功能为“打开菜单”的实体按键。
该菜单可以点触操作，也支持用外接手柄操作。

当您使用外接手柄时，使用左摇杆或者方向键进行选择，使用映射为B键的按键决定。映射为A键的按键用于取消。
例如，如果您想通过快捷菜单读取快速存档，按下十字键左键，然后按B键。
如果您想加速，则只需在打开该菜单之后按下B键

快捷菜单轮盘周围的四个小圆形按键直接映射到以下按键：
L-扳机键：声音开/关
R-扳机键：虚拟麦克风输入（模拟吹气声）
Y-按键：DS Start 键
X-按键：DS Select 键

快捷菜单有以下功能（从顶部开始顺时针）：
- 合上DS屏幕
- 启用/禁用触摸操作
- 快速存档
- 切换上下屏
- 打开完整游戏菜单
- 切换屏幕布局
- 快速读档
- 启用/禁用虚拟按键

中间快进键 '>>' 用于启用/禁用加速


<t1>3. 游戏菜单

<b>切换游戏
点触以加载其他游戏

<b>读取即时存档
读取任一存档位中的即时存档
创建即时存档后才可用

<b>保存即时存档
把当前游戏保存到任一存档位

<b>管理即时存档
在这里你可以删除/复制即时存档

<b>金手指
启用或关闭当前游戏的金手指
可用的金手指条目来自金手指数据库，并且您的设置将针对不同游戏单独记录

<b>自定义金手指
您可以在此为当前游戏添加或启用/禁用自定义金手指

<b>重置游戏
重启正在运行的游戏

<b>选项
进入选项菜单

<b>选择屏幕布局
按下任意布局选项，可改变两块屏幕的位置。
此项设置仅在设备处于横屏模式时生效。
在竖屏模式下，将自动使用竖屏布局。
在横屏模式下选择竖屏布局对于某些游戏是必要的，
因为这些游戏需要将实体机横向握持，像翻书一样操作。

<b>编辑屏幕布局和虚拟按键
打开屏幕布局和虚拟按键编辑器

<b>帮助
打开您现在正在阅读的帮助文档

<b>退出
退出程序


<t1>4. 屏幕布局以及虚拟按键布局自定义

在布局编辑器对话框中，您会看到两块屏幕的当前位置。
点击以选择其中一个，然后您就可以将其移动到任意位置。

<t2>菜单面板 (底部)

<b>菜单
点击此处可将修改后的布局保存为全局布局（适用于所有游戏）或仅保存为当前正在运行游戏的布局。
如果当前游戏已有保存的自定义屏幕布局，也可以通过点击 “删除游戏专用布局” 将其删除。删除后，该游戏将再次使用全局布局。
您可以用同样的方式编辑虚拟按键布局，方法是点击“编辑虚拟按键布局”。
“设置背景图片”允许你为布局设置或移除背景图片。
背景图片会在两块屏幕和虚拟按键的后方全屏显示。
添加背景图片可能会对性能产生一些影响！
支持的背景图片格式为 .png, .jpg, .bmp, 如果不希望图片显示在设备相册中, 也可以将这些文件重命名为 .dbg
图片文件必须放在数据存储目录的 backgrounds 文件夹下，才能在该菜单中使用。

<b>重设为默认
在编辑器中将当前屏幕布局重置为所选布局的默认设置。
只有在重置后通过 “菜单” 保存，默认布局才会生效。

<b>编辑全局布局 / 编辑当前布局
如果同时保存了游戏专用布局和全局布局，您可以在这里选择要编辑哪一个。
当前正在编辑的布局会显示在左上角。

<b>打开工具箱
点击此处打开一组工具，帮助你自定义屏幕布局。
横屏模式下工具排列如下 (左到右，上到下):
- 调整屏幕尺寸为设备屏幕高度的50%
- 把屏幕移到最上边
- 调整屏幕尺寸为设备屏幕宽度的50%
- 把屏幕垂直方向拉伸至最大
- 把屏幕移到最左边
- 把屏幕放在设备屏幕中央
- 把屏幕移到最右边
- 把屏幕水平方向拉伸至最大
- 把屏幕尺寸设为NDS实机尺寸
- 把屏幕移到最下边
- 以原始竖屏布局排列屏幕，并保持适当间距

在右侧，您会看到整倍缩放按钮 1x-8x（具体范围取决于您设备所支持的最大缩放倍数）。

<b>调整屏幕大小
点击即可显示缩放按钮，使用缩放按钮即可自由调整所选屏幕的大小。
关闭“保持比例”后，可以脱离长宽比限制来缩放屏幕。
通常双击屏幕会在最大和最小尺寸之间切换。
如果您为当前布局选择了背景图片，并且该图片上有颜色遮罩的区域用于放置屏幕，
您可以在该遮罩区域双击以自动把屏幕适配进去。

<b>注意:
要把屏幕移动到上方/中间、居中/靠左等位置，先按下工具箱中的“居中”按钮，再选择所需方向。

“原始布局(带间距)”按钮在横屏和竖屏布局下会有不同表现：
横屏布局：会尽可能放大两个屏幕，同时保持一定比例的间距。
竖屏布局：会将两个屏幕在当前大小下水平和垂直居中，并根据当前大小调整间隔。
因此，如果您设备屏幕足够大，并且想要获得最接近实体机的屏幕布局，
请先依次选择每个屏幕，点击“原始大小”按钮，然后再点击“原始布局(带间距)”按钮。


<t1>5. 用户配置文件

您可以在应用初始菜单的右上角找到用户选择按钮。
每个用户都会有自己独立的数据目录，用于保存即时存档和电池存档。选中的金手指以及其他所有设置也都是单独用户专属的。
此外，本Rev版本还允许您删除用户，这功能在原始版本的DraStic中是没有的，
但删除用户意味着该用户保存的即时存档、电池存档以及其他所有数据都将被移除，该操作无法撤销，请谨慎操作！


<t1>6. Slot2 卡带

Slot2 卡带模拟功能允许在虚拟的 Slot2 卡槽中插入一张虚拟卡带，该卡槽在实体机上是存在的。
通常，该卡槽会被用来加载 GBA 游戏，以启用一些额外功能，或者在某些游戏中进行存档文件传输(联动)。

Slot 2 卡带文件应放置在数据存储目录的 slot2 文件夹下。
如果找到名为 <ROM 文件名>.gba 的文件，那么在加载 <ROM 文件名>.nds (或 .zip, .rar, .7z) 时，它将被同时加载。
如果找到名为 <ROM 文件名>.sav 的存档文件，它将会被加载到卡带记忆存储区中。
存档文件应为无任何文件头信息的原始格式，并且应当能与 VBA 或 gpSP 生成的 .sav 文件兼容。支持的存档芯片类型包括 SRAM、FRAM 和 Flash。

如果没有找到 <ROM 文件名>.gba，则会默认加载 slot2_gamepak.gba（若存在）以及对应的 slot2_gamepak.sav


<t1>7. DLDI

如果加载了自制程序/游戏，DraStic 会模拟成 R4 烧录卡，并将模拟的 SD 卡读写操作重定向到名为 drastic_dldi.img 的文件中。
该文件应放置在数据存储路径的根目录下。

您可以在 Linux 设备上按如下操作以创建该镜像文件:
dd if=/dev/zero of=drastic_dldi.img bs=1M count=<容量|单位MB> of=drastic_dldi.img
mkdosfs drastic_dldi.img

接着挂载该镜像:

mkdir <挂载目录>
sudo mount -t vfat drastic_dldi.img -o loop <挂载目录>

挂载后，您就可以直接复制文件到挂载目录中去。最后通过以下命令卸载:

sudo umount <挂载目录>

目前模拟器还不会自动打 DLDI 补丁, 所以您必须确保该自制程序本身已支持 R4。
您可以直接使用已经支持 R4 的自制程序，或者使用离线补丁工具来进行补丁。
例如，您可以使用 dlditool，它目前可以在这里下载：

https://www.chishm.com/DLDI/index.html

下载 dlditool 以及 "R4(DS) - Revolution for DS: DLDI v1", 然后使用以下命令为一个符合 DLDI 标准的自制程序打上 R4 补丁:

dlditool r4tf.dldi <自制程序文件名.nds>


<t1>8. Lua 接口

Lua 脚本可以放在数据存储目录的 scripts 文件夹下，并会在以下场合加载：
- 当加载游戏时，如果找到名为 <ROM 文件名>.lua 的脚本。
- 如果存在一个名为 "default.lua" 的脚本，则它会对所有游戏生效并被加载。

<t2>8.1 Lua 回调函数

在您的 Lua 脚本中可以定义以下 3 个回调函数：

// 当加载新游戏时会被调用
// 'game' 是一个字符串，内容应为不带后缀的 ROM 文件名
// 您可以用该函数来打开文件，例如用于日志记录
<i>function on_load(game)
<i>end

// 当游戏被卸载时调用 (在加载新游戏之前，或是 DraStic 退出时)
// 例如，您可以在此关闭之前打开的文件
<i>function on_unload()
<i>end

// 每一帧都会调用该回调
// 您可以使用该回调来修改按键状态或内存
<i>function on_frame_update()
<i>end

<t2>8.2 Lua 常量

在脚本中可以使用以下常量来获取/设置按键状态：
- drastic.C.BUTTON_UP
- drastic.C.BUTTON_DOWN
- drastic.C.BUTTON_LEFT
- drastic.C.BUTTON_RIGHT
- drastic.C.BUTTON_A
- drastic.C.BUTTON_B
- drastic.C.BUTTON_X
- drastic.C.BUTTON_Y
- drastic.C.BUTTON_L
- drastic.C.BUTTON_R
- drastic.C.BUTTON_START
- drastic.C.BUTTON_SELECT
- drastic.C.BUTTON_FAST_FORWARD
- drastic.C.BUTTON_TOUCH

如果您想测试某个按键是否被按下，可以这样做：
<i>  if ((buttons & drastic.C.BUTTON_A) ~= 0) then
<i>    ...
<i>  end

如果您想设置某个按键，可以这样做：
<i>  buttons = buttons | drastic.C.BUTTON_A

<t2>8.3 模拟器核心相关 Lua 函数

<b>drastic.get_path()
返回一个字符串，内容为数据存储目录的路径

<b>drastic.get_buttons()
返回一个整数，表示当前的按键状态
可以使用 drastic.C.<constant> 中的常量来检测单个按键的状态

<b>drastic.set_buttons(buttons)
将 DraStic 的按键状态设置为传入的整数参数

<b>drastic.get_touch()
返回一个整数，触摸点的 X 坐标存在高 16 位，触摸点的 Y 坐标存在低 16 位

<b>drastic.set_touch(touch_x, touch_y)
将 DraStic 的触摸坐标设置为传入的参数值
这只会设置坐标，如果您想真正按下或松开触摸屏，
需要通过 drastic.set_buttons() 函数设置或消除 drastic.C.BUTTON_TOUCH

<b>内存访问函数
您可以使用以下形式的函数来获取/设置模拟 DS 的内存：
drastic.get_ds_memory_<cpu>_<size>(address)
drastic.set_ds_memory_<cpu>_<size>(address, value)

下面是所有可能的组合：
- drastic.get_ds_memory_arm9_8(address)
- drastic.get_ds_memory_arm9_16(address)
- drastic.get_ds_memory_arm9_32(address)
- drastic.get_ds_memory_arm7_8(address)
- drastic.get_ds_memory_arm7_16(address)
- drastic.get_ds_memory_arm7_32(address)
- drastic.set_ds_memory_arm9_8(address, value)
- drastic.set_ds_memory_arm9_16(address, value)
- drastic.set_ds_memory_arm9_32(address, value)
- drastic.set_ds_memory_arm7_8(address, value)
- drastic.set_ds_memory_arm7_16(address, value)
- drastic.set_ds_memory_arm7_32(address, value)

<t2>8.4 安卓相关 Lua 函数

<b>android.get_axis_lx()
如果使用外接手柄，返回左摇杆 X 轴的浮点数值

<b>android.get_axis_ly()
如果使用外接手柄，返回左摇杆 Y 轴的浮点数值

<b>android.get_axis_rx()
如果使用外接手柄，返回右摇杆 X 轴的浮点数值

<b>android.get_axis_ry()
如果使用外接手柄，返回右摇杆 Y 轴的浮点数值。

<b>android.get_rotation()
返回一个整数，表示当前设备的旋转角度（单位：度）
逆时针旋转范围为 [0, -180]，顺时针旋转的范围为 [0, 180]

<b>android.set_layout(layout)
设置当前屏幕布局（范围 [0, 4]，顺序对应菜单中显示的布局顺序）

<b>android.show_overlay(show)
显示 (1) 或隐藏 (0) 虚拟按键覆盖层

<b>android.set_screen_swap(swap)
启用 (1) 或禁用 (0) 屏幕切换功能
