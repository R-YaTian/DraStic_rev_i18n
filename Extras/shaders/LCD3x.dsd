<vertex>
#ifndef SCREEN_RES_SCALE
#define SCREEN_RES_SCALE 1.0
#endif

attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
uniform vec4 u_texture_size;

varying vec2 v_texture_coordinate;

varying vec4 v_video_size;

const float screen_res_scale = SCREEN_RES_SCALE;

void main()
{
  v_video_size = vec4(u_texture_size.xy * screen_res_scale, u_texture_size.zw / screen_res_scale);
  
  gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
  v_texture_coordinate = a_texture_coordinate;
}
</vertex>

<fragment>
#ifndef BRIGHTEN_SCANLINES
#define BRIGHTEN_SCANLINES 16.0
#endif
#ifndef BRIGHTEN_LCD
#define BRIGHTEN_LCD 4.0
#endif

uniform sampler2D u_texture;
uniform vec4 u_texture_size;

varying vec2 v_texture_coordinate;

varying vec4 v_video_size;

const float brighten_scanlines = BRIGHTEN_SCANLINES;
const float brighten_lcd = BRIGHTEN_LCD;
const vec3 offsets = 3.141592654 * vec3(1.0/2.0, 1.0/2.0 - 2.0/3.0, 1.0/2.0 - 4.0/3.0);

void main()
{
  vec2 omega = 3.141592654 * 2.0 * v_video_size.zw;
  vec3 res = texture2D(u_texture, v_texture_coordinate).rgb;
  vec2 angle = v_texture_coordinate * omega;
  
  float yfactor = (brighten_scanlines + sin(angle.y)) / (brighten_scanlines + 1.0);
  vec3 xfactor = (brighten_lcd + sin(angle.x + offsets)) / (brighten_lcd + 1.0);
  
  vec3 color = yfactor * xfactor * res;
  
  gl_FragColor = vec4(color, 1.0);
}
</fragment>